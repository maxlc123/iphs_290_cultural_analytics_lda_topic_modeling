# -*- coding: utf-8 -*-
"""Copy of scrape_twitter_usgovs_simple.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L-64mM2AbRSHi7eb2aAPKJa66H8hus_M

# REST URL ONLY: Scrape Twitter for US Governors in 2022 Mid-Terms
"""

!pip list

"""# Setup"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

import requests
import json
from pprint import pprint

# import tweepy
# import gc #collecting garbage
from wordcloud import WordCloud,STOPWORDS, ImageColorGenerator #visualisation

sns.set_theme(context='notebook', style='whitegrid', palette='vlag', font='serif')

from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"

"""# Get Data"""

govs_df = pd.read_csv('twitter_2022midterm_us_governors.csv', index_col=[0])
govs_df.head()
govs_df.info()

# Clean imported DataFrame

# Lowercase Columns
govs_df.rename(columns={'Republican':'republican', 'Democrat':'democrat'}, inplace=True)


# Move State Index to separate colum for joining
state_orig_ls = govs_df.index.to_list()
# state_orig_ls[:5]

state_clean_ls = [x.lower().strip(':') for x in state_orig_ls]
# state_clean_ls[:5]

# Insert state col in first position
govs_df.insert(loc=0, column='state', value=state_clean_ls)
# govs_df['state'] = state_clean_ls

# Drop the State Index
govs_df.reset_index(drop=True, inplace=True)

govs_df.head()

# Split into Two (1) Dem and (2) Rep tables

govs_d_df = govs_df[['state','democrat']].copy(deep=True)
# Extract username from url
govs_d_df['screen_name'] = govs_df["democrat"].apply(lambda x: str(x).split('/')[-1])
govs_d_df.head()

govs_r_df = govs_df[['state','republican']].copy(deep=True) 
# Extract username from url
govs_r_df['screen_name'] = govs_df["republican"].apply(lambda x: str(x).split('/')[-1])
govs_r_df.head()

"""# Get OAuth Tokens"""

api_key = 'HuowLmEHZ8fZoULbnKEPf5VKR'
api_secret = '6WX5XtirhdLYEgFRS3HhpmN6iJpDgmb1bOh3N3wAa0fMOEDpdT'
bearer_token = 'AAAAAAAAAAAAAAAAAAAAAGCdJgEAAAAAE%2B%2BCDA0slrwf6SX2DtkcU9BZAjc%3D1PvAVcMF1HM0HlPsUMmShpt94SxfejKXhX9Tzgt7jaEYhZhcTH'
access_token = '935311144130154496-Wpn7EqmpIAzMQQkzb7nswwcl3O7JAkW'
access_token_secret =  'R81IZfVLo6JDm2CFKb1qHW6uTuK73nAd7dM03UhGhqQui'

"""# REST URI Endpoints (v2.0 API)

Regular 

* https://github.com/twitterdev/Twitter-API-v2-sample-code

Academic

* https://github.com/twitterdev/getting-started-with-the-twitter-api-v2-for-academic-research/blob/main/modules/3-deciding-which-endpoints-to-use.md
"""

# Commented out IPython magic to ensure Python compatibility.
# %whos DataFrame

# ONLY RUN if you skipped API v1/v2 search and merge above

govs_d_user_df = govs_d_df.copy()
govs_r_user_df = govs_r_df.copy()

govs_d_user_df.head()
govs_d_user_df.info()

"""## Common Functions"""

def bearer_oauth(r):
    """
    Method required by bearer token authentication.
    """

    r.headers["Authorization"] = f"Bearer {bearer_token}"
    r.headers["User-Agent"] = "v2UserLookupPython"
    return r

def connect_to_endpoint_wo_params(url):
    response = requests.request("GET", url, auth=bearer_oauth,)
    print(response.status_code)
    if response.status_code != 200:
        raise Exception(
            "Request returned an error: {} {}".format(
                response.status_code, response.text
            )
        )
    return response.json()

def connect_to_endpoint_with_params(url, tweet_fields):
    response = requests.request(
        "GET", url, auth=bearer_oauth, params=tweet_fields)
    print(response.status_code)
    if response.status_code != 200:
        raise Exception(
            "Request returned an error: {} {}".format(
                response.status_code, response.text
            )
        )
    return response.json()

"""### User Info"""

# Define DataFrame columns for all the User data elements we want to collect

govs_d_user_df = pd.DataFrame(columns=['screen_name',
                                    'id',
                                    'name',
                                    'location',
                                    'description',
                                    'url',
                                    'created_at',
                                    'verified',
                                    'protected',
                                    # 'followers',
                                    'followers_count',
                                    # 'followers_id',
                                    # 'following',
                                    'follow_request_sent',
                                    # 'follow',
                                    # 'friends',
                                    'friends_count',
                                    'favorites_count',
                                    'listed_count',
                                    # 'status',
                                    # 'statuses_count',
                                    ])

govs_r_user_df = pd.DataFrame(columns=['screen_name',
                                    'id',
                                    'name',
                                    'location',
                                    'description',
                                    'url',
                                    'created_at',
                                    'verified',
                                    'protected',
                                    # 'followers',
                                    'followers_count',
                                    # 'followers_id',
                                    # 'following',
                                    'follow_request_sent',
                                    # 'follow',
                                    # 'friends',
                                    'friends_count',
                                    'favorites_count',
                                    'listed_count',
                                    # 'status',
                                    # 'statuses_count',
                                    ])

govs_d_df.head()

def connect_to_endpoint_with_params(url, tweet_fields):
    response = requests.request(
        "GET", url, auth=bearer_oauth, params=tweet_fields)
    print(response.status_code)
    if response.status_code != 200:
        raise Exception(
            "Request returned an error: {} {}".format(
                response.status_code, response.text
            )
        )
    return response.json()

def get_user_by_username(username, param_str):

    url = f'https://api.twitter.com/2/users/by/username/{username}?user.fields={param_str}'
    url = f"https://api.twitter.com/2/users/by?user.fields={params}"
    params = {"user.fields": param_str}
    json_response = connect_to_endpoint_with_params(url, params)
    return json_response
    
# Test

username = 'KariLake'
params = 'created_at,description,entities,id,location,name,pinned_tweet_id,profile_image_url,protected,public_metrics,url,username,verified,withheld'

user_id = 234896532
json_response = get_followers(user_id)
print(json.dumps(json_response, indent=4, sort_keys=True))

my_followers_df = pd.DataFrame(json_response['data'])
my_followers_df.head()
my_followers_df.info()



url = 'https://api.twitter.com/2/users/by?user.fields='
url

# Get User data for each Dem Governor

for i,agov_username in enumerate(govs_d_df.screen_name.to_list()):
    print(f'Processing #{i}: {agov_username}')
    try:
        # https://docs.tweepy.org/en/v4.8.0/api.html#tweepy.API.get_user
        tweepy_user_obj = api.get_user(screen_name=agov_username)
        print(f'    Twitter ID: {agov_id}')
        
        agov_user_info_ls = [tweepy_user_obj.screen_name,
                             tweepy_user_obj.id,
                             tweepy_user_obj.name,
                             tweepy_user_obj.location,
                             tweepy_user_obj.description,
                             tweepy_user_obj.url,
                             tweepy_user_obj.created_at,
                             tweepy_user_obj.verified,
                             tweepy_user_obj.protected,
                             # tweepy_user_obj.followers,
                             tweepy_user_obj.followers_count,
                             # tweepy_user_obj.followers_ids,
                             # tweepy_user_obj.following,
                             tweepy_user_obj.follow_request_sent,
                             # tweepy_user_obj.follow,
                             # tweepy_user_obj.friends,
                             tweepy_user_obj.friends_count,
                             tweepy_user_obj.favourites_count,
                             tweepy_user_obj.listed_count,
                             # tweepy_user_obj.status,
                             # tweepy_user_obj.statuses_count
                             ]  
        print(f'    Appending row: {agov_user_info_ls}\n\n')
        govs_d_user_df.loc[len(govs_d_user_df)] = agov_user_info_ls                

        
    except:
        print(f'    ERROR: Could not retrieve Tweepy User Object')





# 

# Specify the usernames that you want to lookup below
# You can enter up to 100 comma-separated values.
usernames = "usernames=TwitterDev,TwitterAPI"
user_fields = "user.fields=description,created_at"
# User fields are adjustable, options include:
# created_at, description, entities, id, location, name,
# pinned_tweet_id, profile_image_url, protected,
# public_metrics, url, username, verified, and withheld
url = "https://api.twitter.com/2/users/by?{}&{}".format(usernames, user_fields)
    
json_response = connect_to_endpoint_wo_params(url)
print(json.dumps(json_response, indent=4, sort_keys=True))

"""### User Followers"""

def get_followers(user_id):
    url = "https://api.twitter.com/2/users/{}/following".format(user_id)
    params = {"user.fields": "created_at"}
    json_response = connect_to_endpoint_with_params(url, params)
    return json_response
    
# Test
user_id = 234896532
json_response = get_followers(user_id)
print(json.dumps(json_response, indent=4, sort_keys=True))

my_followers_df = pd.DataFrame(json_response['data'])
my_followers_df.head()
my_followers_df.info()

"""### User Following"""

def get_user_following(id):
    url = "https://api.twitter.com/2/users/{}/following".format(user_id)
    json_response = connect_to_endpoint_wo_params(url)
    return json_response

# Test
user_id = 2244994945

json_response = get_user_following(user_id)
print(json.dumps(json_response, indent=4, sort_keys=True))

my_following_df = pd.DataFrame(json_response['data'])
my_following_df.head()
my_following_df.info()

!cp twitter{_following.csv} twitter_follower_12345.csv

"""### User Timeline"""

def get_user_timeline(id, params):
    url = "https://api.twitter.com/2/users/{}/tweets".format(id)
    # params = {"tweet.fields": "created_at"}
    json_response = connect_to_endpoint_with_params(url, params)
    return json_response


# Tweet fields are adjustable.
# Options include:
# attachments, author_id, context_annotations,
# conversation_id, created_at, entities, geo, id,
# in_reply_to_user_id, lang, non_public_metrics, organic_metrics,
# possibly_sensitive, promoted_metrics, public_metrics, referenced_tweets,
# source, text, and withheld
my_params = {"tweet.fields": "created_at"}

# Test
user_id = 2244994945

json_response = get_user_timeline(user_id, my_params)
print(json.dumps(json_response, indent=4, sort_keys=True))

my_timeline_df = pd.DataFrame(json_response['data'])
my_timeline_df.head()
my_timeline_df.info()

"""### Liked Tweets"""

def get_liked_tweets(id, params):
    url = "https://api.twitter.com/2/users/{}/liked_tweets".format(id)
    # params = {"tweet.fields": "created_at"}
    json_response = connect_to_endpoint_with_params(url, params)
    return json_response


# Tweet fields are adjustable.
# Options include:
# attachments, author_id, context_annotations,
# conversation_id, created_at, entities, geo, id,
# in_reply_to_user_id, lang, non_public_metrics, organic_metrics,
# possibly_sensitive, promoted_metrics, public_metrics, referenced_tweets,
# source, text, and withheld
tweet_fields = "tweet.fields=lang,author_id"
# Be sure to replace your-user-id with your own user ID or one of an authenticating user
# You can find a user ID by using the user lookup endpoint
id = "your-user-id"
# You can adjust ids to include a single Tweets.
# Or you can add to up to 100 comma-separated IDs
url = "https://api.twitter.com/2/users/{}/liked_tweets".format(id)

# Test
user_id = 2244994945

json_response = get_liked_tweets(user_id, tweet_fields)
print(json.dumps(json_response, indent=4, sort_keys=True))

my_liked_tweets_df = pd.DataFrame(json_response['data'])
my_liked_tweets_df.head()
my_liked_tweets_df.info()

"""### Liking Users"""

json_response = get_liking_users(user_id, user_fields)
pprint(json_response)

def get_liking_users(id, params):
    url = "https://api.twitter.com/2/tweets/{}/liking_users".format(id)
    # params = {"tweet.fields": "created_at"}
    json_response = connect_to_endpoint_with_params(url, params)
    return json_response


# User fields are adjustable, options include:
# created_at, description, entities, id, location, name,
# pinned_tweet_id, profile_image_url, protected,
# public_metrics, url, username, verified, and withheld
user_fields = "user.fields=created_at,description"
# You can replace the ID given with the Tweet ID you wish to like.
# You can find an ID by using the Tweet lookup endpoint
id = "1590693373056122880"
# You can adjust ids to include a single Tweets.
# Or you can add to up to 100 comma-separated IDs

# Test
user_id = "1590693373056122880"

json_response = get_liking_users(user_id, user_fields)
print(json.dumps(json_response, indent=4, sort_keys=True))

my_liking_users_df = pd.DataFrame(json_response['data'])
my_liking_users_df.head()
my_liking_users_df.info()

"""# END OF NOTEBOOK

## Appendix: Set Union
"""

# Find common elements in 2 data collections (here lists)
# 
aoc_ls = [1,2,3,4,5,6,7,8,9,10]
mgt_ls = [8,9,10,11,12,13,14,15,16,17,18]

common_ls = list(set(aoc_ls).intersection(set(mgt_ls)))

for auser in common_ls:
    user (user_fields=['created_at','public_metrics'])

"""## Appendix: Join csv"""

aoc_followers_df = pd.read_csv('aoc_following_ids.csv', index_col=[0])
aoc_followers_df.head()
aoc_followers_df.info()

mtg_followers_df = pd.read_csv('mtg_following_ids.csv', index_col=[0])
mtg_followers_df.head()
mtg_followers_df.info()

aoc_followers_ls = aoc_followers_df.id.to_list()
len(aoc_followers_ls)
aoc_followers_ls[:5]

mtg_followers_ls = mtg_followers_df.id.to_list()
len(mtg_followers_ls)
mtg_followers_ls[:5]

aoc_mtg_followers_ls = list(set(aoc_followers_ls).intersection(set(mtg_followers_ls)))
len(aoc_mtg_followers_ls)
aoc_mtg_followers_ls

"""## Appendix: Junk"""

# Twitter Standard API v1.1
# Get Tweet Timelines
# https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-user_timeline

api.user_timeline('GovEvers')



govs_tweets_df = pd.DataFrame()

for i, agov_username in enumerate(govs_username_ls[:3]):
    print(f'Processing #{i}: {agov_username}')
    get_user_tweets(x.Twitter_username, x.Political_party),axis=1)
gc.collect()
    # govs_tweets_df.append(agov_username)
    # govs_df.apply(lambda x:get_user_tweets(x.Twitter_username, x.Political_party),axis=1)
    df.apply(lambda x:get_user_tweets(x.Twitter_username, x.Political_party),axis=1)
gc.collect()
    gc.collect()

