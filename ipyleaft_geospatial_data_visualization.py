# -*- coding: utf-8 -*-
"""IpyLeaft - Geospatial Data Visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QEaZ6aZHkGzsTWiXtEywAZdvIyP_85tb
"""



# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/gdrive')
# %cd /gdrive

# Commented out IPython magic to ensure Python compatibility.
# %cd ./My\ Drive

!ls

!pip list

!pip install ipyleaflet

!pip install geopandas

from ipyleaflet import (Map, GeoData, basemaps, WidgetControl, GeoJSON,
                        LayersControl, Icon, Marker,basemap_to_tiles, Choropleth,
                        MarkerCluster, Heatmap,SearchControl, 
                        FullScreenControl)

from ipywidgets import Text, HTML
from branca.colormap import linear
import geopandas as gpd
import json

!wget https://cloud.comhem.se/s/2252cb28562536544aa85e6019b8ed2faac

!pwd

# Countries
countries = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))

# Conflict Dataset Points
africa_acled = gpd.read_file(
    "data/acled2019.shp", mask = countries[countries["continent"] == "Africa"]
)
africa_acled

africa_acled.head()

"""## Base maps, Markers & Icons

"""

center = [57.71, 11.98]
zoom = 12

m = Map(basemap=basemaps.Esri.WorldImagery, center=center, zoom=zoom)
m

stamen = basemap_to_tiles(basemaps.Stamen.Toner)
m.add_layer(stamen)

marker = Marker(location=center, draggable=False)
m.add_layer(marker);

m

icon_url = "http://icons.iconarchive.com/icons/pelfusion/long-shadow-media/512/Maps-Pin-Place-icon.png"

icon = Icon(icon_url=icon_url)
mark = Marker(location=[57.719503, 12.008843], icon=icon, rotation_angle=0,  rotation_origin='1280px 128px')
m.add_layer(mark);
m

"""## Geodata and Map Styles"""

center = [4.546647, 22.373178]
zoom = 2

africa = countries[countries["continent"] == "Africa"]
africaMap = Map(basemap=basemaps.CartoDB.Positron, center=center, zoom=zoom)
geodata = GeoData(geo_dataframe = africa, 
                   style={'color': 'black', 'fillColor': '#E0D071', 'opacity':0.03, 'weight':1.9, 'dashArray':'2', 'fillOpacity':0.6},
                   hover_style={'fillColor': '#b08a3e' , 'fillOpacity': 0.8},
                   name = 'Countries')


africaMap.add_layer(geodata)
africaMap

html = HTML('''Hover Over Countries''')
html.layout.margin = '0px 20px 20px 20px'
control = WidgetControl(widget=html, position='topright')
africaMap.add_control(control)

def update_html(feature,  **kwargs):
    html.value = '''
        <h3><b>{}</b></h3>
        <h4>GDP: {:.2e} people</h4> 
        <h4>Population: {}</h4>
    '''.format(feature['properties']['name'],
               feature['properties']['gdp_md_est'],
               feature['properties']['pop_est'])

geodata.on_hover(update_html)

"""### Choropleth Map"""

type(africa)

africa.se

africa = africa.at(60, 'name', "Ivory Coast")
pop =  dict(zip(africa['name'].tolist(), africa['pop_est'].tolist()))
africa[["name", "geometry"]].to_file("data/africa.json", driver="GeoJSON", encoding='utf-8')
geojson_data = json.load(open("data/africa.json",'r'))

for feature in geojson_data['features']:
    properties = feature['properties']
    feature.update(id=properties['name'])
    #print(feature['id'])

choroplethData = Choropleth(
    geo_data=geojson_data,
    choro_data=pop,
    colormap=linear.YlOrRd_04,
    style={'fillOpacity': 0.8, 'dashArray': '5, 5'}
)

choro_map = Map(center = (4.546647, 22.373178), zoom = 2)
choro_map.add_layer(choroplethData)
choro_map

"""### Clustered Maps"""

pointsMap = Map(basemap=basemaps.CartoDB.Positron, center=center, zoom=zoom)
PointData = GeoData(geo_dataframe = africa_acled.sample(500), name = 'Countries')


pointsMap.add_layer(PointData)
pointsMap

clusterMap = Map(center=center, zoom=zoom)
clusterMap.add_layer(MarkerCluster(
    markers=[Marker(location=geolocation.coords[0][::-1]) for geolocation in africa_acled.sample(1000).geometry])
    )
clusterMap

"""## Controls"""

search = SearchControl(position="topleft", 
                       url='https://nominatim.openstreetmap.org/search?format=json&q={s}', 
                       zoom=5,
                       property_name='display_name',
                       marker=marker
                      )
clusterMap.add_control(search)

clusterMap

control = FullScreenControl()
clusterMap.add_control(control)

